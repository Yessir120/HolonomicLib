<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classHolonomicLib_1_1AsyncHolonomicChassisController" kind="class" language="C++" prot="public">
    <compoundname>HolonomicLib::AsyncHolonomicChassisController</compoundname>
    <basecompoundref refid="classHolonomicLib_1_1TaskWrapper" prot="public" virt="non-virtual">HolonomicLib::TaskWrapper</basecompoundref>
    <basecompoundref refid="classHolonomicLib_1_1StateMachine" prot="public" virt="non-virtual">HolonomicLib::StateMachine&lt; ChassisState &gt;</basecompoundref>
    <includes refid="AsyncHolonomicChassisController_8hpp" local="no">AsyncHolonomicChassisController.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a39298643fed60a60698cf137a433a869" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class AsyncHolonomicChassisControllerBuilder</definition>
        <argsstring></argsstring>
        <name>AsyncHolonomicChassisControllerBuilder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="66" column="5" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0fdec61410af96d89275473fca65894c" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; okapi::XDriveModel &gt;</type>
        <definition>std::shared_ptr&lt;okapi::XDriveModel&gt; HolonomicLib::AsyncHolonomicChassisController::model</definition>
        <argsstring></argsstring>
        <name>model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="127" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a9e957edd5ba5a6b97db19e5a35da3be1" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; okapi::OdomChassisController &gt;</type>
        <definition>std::shared_ptr&lt;okapi::OdomChassisController&gt; HolonomicLib::AsyncHolonomicChassisController::chassis</definition>
        <argsstring></argsstring>
        <name>chassis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="128" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1af1d95cc7acd8b3c10b83ffcb18763cbf" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; okapi::IterativePosPIDController &gt;</type>
        <definition>std::unique_ptr&lt;okapi::IterativePosPIDController&gt; HolonomicLib::AsyncHolonomicChassisController::xController</definition>
        <argsstring></argsstring>
        <name>xController</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="130" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a6331d3e6176bbba4928397de53951587" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; okapi::IterativePosPIDController &gt;</type>
        <definition>std::unique_ptr&lt;okapi::IterativePosPIDController&gt; HolonomicLib::AsyncHolonomicChassisController::yController</definition>
        <argsstring></argsstring>
        <name>yController</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="131" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a35e7fb858907a0f69e5a8811180465cb" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; okapi::IterativePosPIDController &gt;</type>
        <definition>std::unique_ptr&lt;okapi::IterativePosPIDController&gt; HolonomicLib::AsyncHolonomicChassisController::turnController</definition>
        <argsstring></argsstring>
        <name>turnController</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="132" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ad0ac308bb0e13b1c5073331d73837c0e" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; okapi::AbstractRate &gt;</type>
        <definition>std::unique_ptr&lt;okapi::AbstractRate&gt; HolonomicLib::AsyncHolonomicChassisController::rate</definition>
        <argsstring></argsstring>
        <name>rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="134" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae926a61b5d1bb75d978914fe173f73ab" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; okapi::AbstractTimer &gt;</type>
        <definition>std::unique_ptr&lt;okapi::AbstractTimer&gt; HolonomicLib::AsyncHolonomicChassisController::timer</definition>
        <argsstring></argsstring>
        <name>timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="135" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a11d2dd008802aecd56e3a0d4b34e8369" prot="protected" static="no" mutable="no">
        <type>okapi::QTime</type>
        <definition>okapi::QTime HolonomicLib::AsyncHolonomicChassisController::delayTime</definition>
        <argsstring></argsstring>
        <name>delayTime</name>
        <initializer>{0.0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="136" column="18" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a3cc8ebdf34757bfbf44bb7f8799b466e" prot="protected" static="no" mutable="no">
        <type><ref refid="classHolonomicLib_1_1Trajectory" kindref="compound">Trajectory</ref></type>
        <definition>Trajectory HolonomicLib::AsyncHolonomicChassisController::trajectory</definition>
        <argsstring></argsstring>
        <name>trajectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="138" column="16" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a5a15bfa8df9ecbce31ca07ce55bbbfea" prot="protected" static="no" mutable="no">
        <type><ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref></type>
        <definition>Pose2D HolonomicLib::AsyncHolonomicChassisController::initialPose</definition>
        <argsstring></argsstring>
        <name>initialPose</name>
        <initializer>{0 * okapi::inch, 0 * okapi::inch, 0 * okapi::degree}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="139" column="12" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ad2bf5ee58e0866db70a82dc68a67186d" prot="protected" static="no" mutable="no">
        <type>okapi::OdomState</type>
        <definition>okapi::OdomState HolonomicLib::AsyncHolonomicChassisController::currentOdomState</definition>
        <argsstring></argsstring>
        <name>currentOdomState</name>
        <initializer>{0 * okapi::inch, 0 * okapi::inch, 0 * okapi::degree}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="140" column="22" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a8ddc964faf9dd6942305e6fbb2a783c1" prot="protected" static="no" mutable="no">
        <type><ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref></type>
        <definition>Pose2D HolonomicLib::AsyncHolonomicChassisController::currentPose</definition>
        <argsstring></argsstring>
        <name>currentPose</name>
        <initializer>{0 * okapi::inch, 0 * okapi::inch, 0 * okapi::degree}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="141" column="12" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1aacf390977de28b9a0fa2f59a977419eb" prot="protected" static="no" mutable="no">
        <type><ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref></type>
        <definition>Pose2D HolonomicLib::AsyncHolonomicChassisController::endPose</definition>
        <argsstring></argsstring>
        <name>endPose</name>
        <initializer>{0 * okapi::inch, 0 * okapi::inch, 0 * okapi::degree}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="143" column="12" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ac05ed6d7299a1512b5b4d0f15fc1dc2e" prot="protected" static="no" mutable="no">
        <type><ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref></type>
        <definition>Pose2D HolonomicLib::AsyncHolonomicChassisController::settleTolerance</definition>
        <argsstring></argsstring>
        <name>settleTolerance</name>
        <initializer>{1 * okapi::inch, 1 * okapi::inch, 1 * okapi::degree}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="144" column="12" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a33367b32d444678c890b2c326f0c5a9a" prot="protected" static="no" mutable="no">
        <type><ref refid="classHolonomicLib_1_1TimedTrajectory" kindref="compound">TimedTrajectory</ref></type>
        <definition>TimedTrajectory HolonomicLib::AsyncHolonomicChassisController::timedTrajectory</definition>
        <argsstring></argsstring>
        <name>timedTrajectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="146" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a8bbcf44d16d151ea5ea4846d745225c2" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool HolonomicLib::AsyncHolonomicChassisController::timedTrajectoryEnabled</definition>
        <argsstring></argsstring>
        <name>timedTrajectoryEnabled</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="147" column="10" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1aa54abc5771999cf9d0308ee322a5ea6d" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int HolonomicLib::AsyncHolonomicChassisController::index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="149" column="9" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a371df87b8aa3c38b89fbb45880d6b72a" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool HolonomicLib::AsyncHolonomicChassisController::initialRun</definition>
        <argsstring></argsstring>
        <name>initialRun</name>
        <initializer>{true}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="151" column="10" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a876a5a913b687017ca4f99d44d37d1fb" prot="protected" static="no" mutable="no">
        <type>pros::Mutex</type>
        <definition>pros::Mutex HolonomicLib::AsyncHolonomicChassisController::lock</definition>
        <argsstring></argsstring>
        <name>lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="153" column="17" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a8d7db6773963de4167e25363dfe8cd7d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HolonomicLib::AsyncHolonomicChassisController::AsyncHolonomicChassisController</definition>
        <argsstring>(std::shared_ptr&lt; okapi::OdomChassisController &gt; ichassis, const okapi::IterativePosPIDController::Gains &amp;itranslateGains, const okapi::IterativePosPIDController::Gains &amp;iturnGains, const okapi::TimeUtil &amp;itimeUtil)</argsstring>
        <name>AsyncHolonomicChassisController</name>
        <param>
          <type>std::shared_ptr&lt; okapi::OdomChassisController &gt;</type>
          <declname>ichassis</declname>
        </param>
        <param>
          <type>const okapi::IterativePosPIDController::Gains &amp;</type>
          <declname>itranslateGains</declname>
        </param>
        <param>
          <type>const okapi::IterativePosPIDController::Gains &amp;</type>
          <declname>iturnGains</declname>
        </param>
        <param>
          <type>const okapi::TimeUtil &amp;</type>
          <declname>itimeUtil</declname>
        </param>
        <briefdescription>
<para>Construct a new Async Holonomic Chassis Controller object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ichassis</parametername>
</parameternamelist>
<parameterdescription>
<para>output chassis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itranslateGains</parametername>
</parameternamelist>
<parameterdescription>
<para>movement PID gains </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iturnGains</parametername>
</parameternamelist>
<parameterdescription>
<para>turn PID gains </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itimeUtil</parametername>
</parameternamelist>
<parameterdescription>
<para>okapi time utility </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="45" column="5" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="5" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a7a5fbd5a7fc3b55392728563345dcb83" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HolonomicLib::AsyncHolonomicChassisController::AsyncHolonomicChassisController</definition>
        <argsstring>(std::shared_ptr&lt; okapi::OdomChassisController &gt; ichassis, const okapi::IterativePosPIDController::Gains &amp;itranslateGains, const okapi::IterativePosPIDController::Gains &amp;iturnGains, const Pose2D &amp;isettleTolerance, const okapi::TimeUtil &amp;itimeUtil)</argsstring>
        <name>AsyncHolonomicChassisController</name>
        <param>
          <type>std::shared_ptr&lt; okapi::OdomChassisController &gt;</type>
          <declname>ichassis</declname>
        </param>
        <param>
          <type>const okapi::IterativePosPIDController::Gains &amp;</type>
          <declname>itranslateGains</declname>
        </param>
        <param>
          <type>const okapi::IterativePosPIDController::Gains &amp;</type>
          <declname>iturnGains</declname>
        </param>
        <param>
          <type>const <ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref> &amp;</type>
          <declname>isettleTolerance</declname>
        </param>
        <param>
          <type>const okapi::TimeUtil &amp;</type>
          <declname>itimeUtil</declname>
        </param>
        <briefdescription>
<para>Construct a new Async Holonomic Chassis Controller object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ichassis</parametername>
</parameternamelist>
<parameterdescription>
<para>output chassis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itranslateGains</parametername>
</parameternamelist>
<parameterdescription>
<para>movementPID gains </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iturnGains</parametername>
</parameternamelist>
<parameterdescription>
<para>turn PID gains </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isettleTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>settle tolerance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itimeUtil</parametername>
</parameternamelist>
<parameterdescription>
<para>okapi time utility </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="59" column="5" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="25" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae24362f0e83484242658d5adc7c54304" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::loop</definition>
        <argsstring>() override</argsstring>
        <name>loop</name>
        <reimplements refid="classHolonomicLib_1_1TaskWrapper_1aae903bdf162e10c1af03c2907e6056bb">loop</reimplements>
        <briefdescription>
<para>Override this function to implement a custom task loop. </para>
        </briefdescription>
        <detaileddescription>
<para>Will throw if not overridden. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="155" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="119" bodyend="191"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a195be649bfac66424e54a4018c62c89b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::setTarget</definition>
        <argsstring>(Pose2D targetPose, bool waitUntilSettled=false)</argsstring>
        <name>setTarget</name>
        <param>
          <type><ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref></type>
          <declname>targetPose</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>waitUntilSettled</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sets desired controller target (Pose) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>targetPose</parametername>
</parameternamelist>
<parameterdescription>
<para>desired Pose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>waitUntilSettled</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the controller will delay until the chassis has settled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="75" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="36" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a2e1f4ed7cdb6a3ccfb646dce52732bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::setTarget</definition>
        <argsstring>(Trajectory &amp;itrajectory, bool waitUntilSettled=false)</argsstring>
        <name>setTarget</name>
        <param>
          <type><ref refid="classHolonomicLib_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>itrajectory</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>waitUntilSettled</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sets desired controller target (<ref refid="classHolonomicLib_1_1Trajectory" kindref="compound">Trajectory</ref> - used with old Pathplanner) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itrajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>trajectory to be followed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>waitUntilSettled</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the controller will delay until the chassis has settled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="83" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="49" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a7715f435461cbe32a3210d3e55b184d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::setTarget</definition>
        <argsstring>(TimedTrajectory &amp;itrajectory, bool waitUntilSettled=false)</argsstring>
        <name>setTarget</name>
        <param>
          <type><ref refid="classHolonomicLib_1_1TimedTrajectory" kindref="compound">TimedTrajectory</ref> &amp;</type>
          <declname>itrajectory</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>waitUntilSettled</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sets desired controller target (<ref refid="classHolonomicLib_1_1TimedTrajectory" kindref="compound">TimedTrajectory</ref> - used with new Pathplanner) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itrajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>trajectory to be followed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>waitUntilSettled</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the controller will delay until the chassis has settled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="91" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="68" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a2cbd8303b80c220e95c1a7cb72fcf78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stops chassis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="97" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0816021af47ab98099d2944712c8d35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::waitUntilSettled</definition>
        <argsstring>()</argsstring>
        <name>waitUntilSettled</name>
        <briefdescription>
<para>delays until the chassis has settled </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="103" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a939cb341c80737753bbc6031448e7a04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::setPose</definition>
        <argsstring>(Pose2D &amp;ipose)</argsstring>
        <name>setPose</name>
        <param>
          <type><ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref> &amp;</type>
          <declname>ipose</declname>
        </param>
        <briefdescription>
<para>Sets current odom pose. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipose</parametername>
</parameternamelist>
<parameterdescription>
<para>current pose </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="110" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a3d0965b11e7593e2bd83116fcf17815d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref></type>
        <definition>Pose2D HolonomicLib::AsyncHolonomicChassisController::getPose</definition>
        <argsstring>()</argsstring>
        <name>getPose</name>
        <briefdescription>
<para>Gets current odom pose. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>current pose </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="117" column="12" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0577b6fa6502e975d93b0ec96458351d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool HolonomicLib::AsyncHolonomicChassisController::isSettled</definition>
        <argsstring>()</argsstring>
        <name>isSettled</name>
        <briefdescription>
<para>Checks if the chassis is settled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if chassis is settled or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="124" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="109" bodyend="117"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae1edcd9d7d6bd7ebaef38acc0096bbb7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::resetControllers</definition>
        <argsstring>()</argsstring>
        <name>resetControllers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="158" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a89c48cc246063fee066986fce0395e76" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::controllerFlipDisabled</definition>
        <argsstring>(bool isDisabled)</argsstring>
        <name>controllerFlipDisabled</name>
        <param>
          <type>bool</type>
          <declname>isDisabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="159" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="199" bodyend="203"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>HolonomicLib::StateMachine&lt; ChassisState &gt;</label>
        <link refid="classHolonomicLib_1_1StateMachine"/>
      </node>
      <node id="1">
        <label>HolonomicLib::AsyncHolonomicChassisController</label>
        <link refid="classHolonomicLib_1_1AsyncHolonomicChassisController"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>HolonomicLib::TaskWrapper</label>
        <link refid="classHolonomicLib_1_1TaskWrapper"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>HolonomicLib::StateMachine&lt; ChassisState &gt;</label>
        <link refid="classHolonomicLib_1_1StateMachine"/>
      </node>
      <node id="5">
        <label>HolonomicLib::Pose2D</label>
        <link refid="structHolonomicLib_1_1Pose2D"/>
      </node>
      <node id="4">
        <label>HolonomicLib::TimedTrajectory</label>
        <link refid="classHolonomicLib_1_1TimedTrajectory"/>
      </node>
      <node id="6">
        <label>HolonomicLib::Trajectory</label>
        <link refid="classHolonomicLib_1_1Trajectory"/>
      </node>
      <node id="1">
        <label>HolonomicLib::AsyncHolonomicChassisController</label>
        <link refid="classHolonomicLib_1_1AsyncHolonomicChassisController"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>timedTrajectory</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>initialPose</edgelabel>
          <edgelabel>settleTolerance</edgelabel>
          <edgelabel>currentPose</edgelabel>
          <edgelabel>endPose</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>trajectory</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>HolonomicLib::TaskWrapper</label>
        <link refid="classHolonomicLib_1_1TaskWrapper"/>
      </node>
    </collaborationgraph>
    <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="35" column="1" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="33" bodyend="160"/>
    <listofallmembers>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a8d7db6773963de4167e25363dfe8cd7d" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>AsyncHolonomicChassisController</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a7a5fbd5a7fc3b55392728563345dcb83" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>AsyncHolonomicChassisController</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a39298643fed60a60698cf137a433a869" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>AsyncHolonomicChassisControllerBuilder</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a9e957edd5ba5a6b97db19e5a35da3be1" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>chassis</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a89c48cc246063fee066986fce0395e76" prot="private" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>controllerFlipDisabled</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ad2bf5ee58e0866db70a82dc68a67186d" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>currentOdomState</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a8ddc964faf9dd6942305e6fbb2a783c1" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>currentPose</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a11d2dd008802aecd56e3a0d4b34e8369" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>delayTime</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1aacf390977de28b9a0fa2f59a977419eb" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>endPose</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1af58e45d5f1fca9352d755f5b4d5024e2" prot="public" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>getName</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a3d0965b11e7593e2bd83116fcf17815d" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>getPose</name></member>
      <member refid="classHolonomicLib_1_1StateMachine_1a7b4775f3279fd7004c2d6f6e46178639" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>getState</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1aa54abc5771999cf9d0308ee322a5ea6d" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>index</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a5a15bfa8df9ecbce31ca07ce55bbbfea" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>initialPose</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a371df87b8aa3c38b89fbb45880d6b72a" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>initialRun</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0577b6fa6502e975d93b0ec96458351d" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>isSettled</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a876a5a913b687017ca4f99d44d37d1fb" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>lock</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae24362f0e83484242658d5adc7c54304" prot="protected" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>loop</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0fdec61410af96d89275473fca65894c" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>model</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1ac0923845cff95c58e808e584dacff2ec" prot="public" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>pauseTask</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ad0ac308bb0e13b1c5073331d73837c0e" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>rate</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae1edcd9d7d6bd7ebaef38acc0096bbb7" prot="private" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>resetControllers</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1ae7e853972219642cd24ab3e67fdb6066" prot="public" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>resumeTask</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a939cb341c80737753bbc6031448e7a04" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>setPose</name></member>
      <member refid="classHolonomicLib_1_1StateMachine_1a9dbf72721774a28d20d5f38cc28f4016" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>setState</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a195be649bfac66424e54a4018c62c89b" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>setTarget</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a2e1f4ed7cdb6a3ccfb646dce52732bf7" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>setTarget</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a7715f435461cbe32a3210d3e55b184d9" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>setTarget</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ac05ed6d7299a1512b5b4d0f15fc1dc2e" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>settleTolerance</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a089e272b1a57bacb73fd8641d45e37ef" prot="public" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>startTask</name></member>
      <member refid="classHolonomicLib_1_1StateMachine_1a6f0aa72f5b506a45f1ca137ccb2a24e4" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>StateMachine</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a2cbd8303b80c220e95c1a7cb72fcf78d" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>stop</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a754156c423dcfb09dc4342e2833f3bef" prot="public" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>stopTask</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a7c86cdfa2cb0c99bf7169b820aa078eb" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>TaskWrapper</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a251cca2526a0f4c87e60fc4e48e4a2d6" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>TaskWrapper</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a09f915ceb1e5dacd86beef177b6b4e70" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>TaskWrapper</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a33367b32d444678c890b2c326f0c5a9a" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>timedTrajectory</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a8bbcf44d16d151ea5ea4846d745225c2" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>timedTrajectoryEnabled</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae926a61b5d1bb75d978914fe173f73ab" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>timer</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a3cc8ebdf34757bfbf44bb7f8799b466e" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>trajectory</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a35e7fb858907a0f69e5a8811180465cb" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>turnController</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0816021af47ab98099d2944712c8d35c" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>waitUntilSettled</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1af1d95cc7acd8b3c10b83ffcb18763cbf" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>xController</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a6331d3e6176bbba4928397de53951587" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>yController</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a5499e201e0a8d84717ff10ee78cbeaa4" prot="protected" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>~TaskWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
