<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classHolonomicLib_1_1AsyncHolonomicChassisController" kind="class" language="C++" prot="public">
    <compoundname>HolonomicLib::AsyncHolonomicChassisController</compoundname>
    <basecompoundref refid="classHolonomicLib_1_1TaskWrapper" prot="public" virt="non-virtual">HolonomicLib::TaskWrapper</basecompoundref>
    <basecompoundref refid="classHolonomicLib_1_1StateMachine" prot="public" virt="non-virtual">HolonomicLib::StateMachine&lt; ChassisState &gt;</basecompoundref>
    <includes refid="AsyncHolonomicChassisController_8hpp" local="no">AsyncHolonomicChassisController.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a39298643fed60a60698cf137a433a869" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class AsyncHolonomicChassisControllerBuilder</definition>
        <argsstring></argsstring>
        <name>AsyncHolonomicChassisControllerBuilder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="49" column="5" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0fdec61410af96d89275473fca65894c" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; okapi::XDriveModel &gt;</type>
        <definition>std::shared_ptr&lt;okapi::XDriveModel&gt; HolonomicLib::AsyncHolonomicChassisController::model</definition>
        <argsstring></argsstring>
        <name>model</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="130" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a9e957edd5ba5a6b97db19e5a35da3be1" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; okapi::OdomChassisController &gt;</type>
        <definition>std::shared_ptr&lt;okapi::OdomChassisController&gt; HolonomicLib::AsyncHolonomicChassisController::chassis</definition>
        <argsstring></argsstring>
        <name>chassis</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="131" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a442c2201aa779bd710e59abc830de379" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; okapi::IterativePosPIDController &gt;</type>
        <definition>std::unique_ptr&lt;okapi::IterativePosPIDController&gt; HolonomicLib::AsyncHolonomicChassisController::distController</definition>
        <argsstring></argsstring>
        <name>distController</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="133" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a35e7fb858907a0f69e5a8811180465cb" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; okapi::IterativePosPIDController &gt;</type>
        <definition>std::unique_ptr&lt;okapi::IterativePosPIDController&gt; HolonomicLib::AsyncHolonomicChassisController::turnController</definition>
        <argsstring></argsstring>
        <name>turnController</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="134" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ad0ac308bb0e13b1c5073331d73837c0e" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; okapi::AbstractRate &gt;</type>
        <definition>std::unique_ptr&lt;okapi::AbstractRate&gt; HolonomicLib::AsyncHolonomicChassisController::rate</definition>
        <argsstring></argsstring>
        <name>rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="136" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae926a61b5d1bb75d978914fe173f73ab" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; okapi::AbstractTimer &gt;</type>
        <definition>std::unique_ptr&lt;okapi::AbstractTimer&gt; HolonomicLib::AsyncHolonomicChassisController::timer</definition>
        <argsstring></argsstring>
        <name>timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="137" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a3cc8ebdf34757bfbf44bb7f8799b466e" prot="protected" static="no" mutable="no">
        <type><ref refid="classHolonomicLib_1_1Trajectory" kindref="compound">Trajectory</ref></type>
        <definition>Trajectory HolonomicLib::AsyncHolonomicChassisController::trajectory</definition>
        <argsstring></argsstring>
        <name>trajectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="139" column="16" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a33367b32d444678c890b2c326f0c5a9a" prot="protected" static="no" mutable="no">
        <type><ref refid="classHolonomicLib_1_1TimedTrajectory" kindref="compound">TimedTrajectory</ref></type>
        <definition>TimedTrajectory HolonomicLib::AsyncHolonomicChassisController::timedTrajectory</definition>
        <argsstring></argsstring>
        <name>timedTrajectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="140" column="21" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1aacf390977de28b9a0fa2f59a977419eb" prot="protected" static="no" mutable="no">
        <type><ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref></type>
        <definition>Pose2D HolonomicLib::AsyncHolonomicChassisController::endPose</definition>
        <argsstring></argsstring>
        <name>endPose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="141" column="12" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a8ddc964faf9dd6942305e6fbb2a783c1" prot="protected" static="no" mutable="no">
        <type><ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref></type>
        <definition>Pose2D HolonomicLib::AsyncHolonomicChassisController::currentPose</definition>
        <argsstring></argsstring>
        <name>currentPose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="143" column="12" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a72d773d7ee90e1204618ecaaccae9cc9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool HolonomicLib::AsyncHolonomicChassisController::isTimedTrajectory</definition>
        <argsstring></argsstring>
        <name>isTimedTrajectory</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="144" column="10" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1aa54abc5771999cf9d0308ee322a5ea6d" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int HolonomicLib::AsyncHolonomicChassisController::index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="145" column="9" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a11d2dd008802aecd56e3a0d4b34e8369" prot="protected" static="no" mutable="no">
        <type>okapi::QTime</type>
        <definition>okapi::QTime HolonomicLib::AsyncHolonomicChassisController::delayTime</definition>
        <argsstring></argsstring>
        <name>delayTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="146" column="18" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a876a5a913b687017ca4f99d44d37d1fb" prot="protected" static="no" mutable="no">
        <type>pros::Mutex</type>
        <definition>pros::Mutex HolonomicLib::AsyncHolonomicChassisController::lock</definition>
        <argsstring></argsstring>
        <name>lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="148" column="17" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a204d6180f23ff817e415f57867c0cee5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HolonomicLib::AsyncHolonomicChassisController::AsyncHolonomicChassisController</definition>
        <argsstring>(std::shared_ptr&lt; okapi::OdomChassisController &gt; ichassis, std::unique_ptr&lt; okapi::IterativePosPIDController &gt; idistController, std::unique_ptr&lt; okapi::IterativePosPIDController &gt; iturnController, const okapi::TimeUtil &amp;itimeUtil)</argsstring>
        <name>AsyncHolonomicChassisController</name>
        <param>
          <type>std::shared_ptr&lt; okapi::OdomChassisController &gt;</type>
          <declname>ichassis</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; okapi::IterativePosPIDController &gt;</type>
          <declname>idistController</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; okapi::IterativePosPIDController &gt;</type>
          <declname>iturnController</declname>
        </param>
        <param>
          <type>const okapi::TimeUtil &amp;</type>
          <declname>itimeUtil</declname>
        </param>
        <briefdescription>
<para>Constructs a new Async Holonomic Chassis Controller object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ichassis</parametername>
</parameternamelist>
<parameterdescription>
<para>output chassis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idistController</parametername>
</parameternamelist>
<parameterdescription>
<para>the distance PID controller </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iturnController</parametername>
</parameternamelist>
<parameterdescription>
<para>the turn PID Controller </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itimeUtil</parametername>
</parameternamelist>
<parameterdescription>
<para>okapi time utility </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="44" column="5" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="5" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae24362f0e83484242658d5adc7c54304" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::loop</definition>
        <argsstring>() override</argsstring>
        <name>loop</name>
        <reimplements refid="classHolonomicLib_1_1TaskWrapper_1aae903bdf162e10c1af03c2907e6056bb">loop</reimplements>
        <briefdescription>
<para>TPeriodic task loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="114" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="96" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae1edcd9d7d6bd7ebaef38acc0096bbb7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::resetControllers</definition>
        <argsstring>()</argsstring>
        <name>resetControllers</name>
        <briefdescription>
<para>Resets the two PID controllers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="120" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ac19e10d15a6a3662094b5913c98fcd48" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::setControllerSampleTime</definition>
        <argsstring>(okapi::QTime itime)</argsstring>
        <name>setControllerSampleTime</name>
        <param>
          <type>okapi::QTime</type>
          <declname>itime</declname>
        </param>
        <briefdescription>
<para>Set the loop time of the two PID controllers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itime</parametername>
</parameternamelist>
<parameterdescription>
<para>the loop time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="127" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="155" bodyend="158"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1abe2b624eb3ec3efb0f5715d826ad93c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::setTarget</definition>
        <argsstring>(const Pose2D &amp;ipose, bool waitUntilSettled=false)</argsstring>
        <name>setTarget</name>
        <param>
          <type>const <ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref> &amp;</type>
          <declname>ipose</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>waitUntilSettled</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sets desired controller target (Pose) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipose</parametername>
</parameternamelist>
<parameterdescription>
<para>desired Pose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>waitUntilSettled</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the controller will delay until the chassis has settled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="58" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="23" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a3609f4c1c91dfee3f12b41b620ff0a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::setTarget</definition>
        <argsstring>(const Trajectory &amp;itrajectory, bool waitUntilSettled=false)</argsstring>
        <name>setTarget</name>
        <param>
          <type>const <ref refid="classHolonomicLib_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>itrajectory</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>waitUntilSettled</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sets desired controller target (<ref refid="classHolonomicLib_1_1Trajectory" kindref="compound">Trajectory</ref> - used with old Pathplanner) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itrajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>trajectory to be followed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>waitUntilSettled</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the controller will delay until the chassis has settled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="66" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="36" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a388a64ffd23b7a3f3d8d38fb247ae6ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::setTarget</definition>
        <argsstring>(const TimedTrajectory &amp;itrajectory, bool waitUntilSettled=false)</argsstring>
        <name>setTarget</name>
        <param>
          <type>const <ref refid="classHolonomicLib_1_1TimedTrajectory" kindref="compound">TimedTrajectory</ref> &amp;</type>
          <declname>itrajectory</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>waitUntilSettled</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sets desired controller target (<ref refid="classHolonomicLib_1_1TimedTrajectory" kindref="compound">TimedTrajectory</ref> - used with new Pathplanner) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itrajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>trajectory to be followed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>waitUntilSettled</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the controller will delay until the chassis has settled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="74" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="51" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a2cbd8303b80c220e95c1a7cb72fcf78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stops chassis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="80" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0816021af47ab98099d2944712c8d35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::waitUntilSettled</definition>
        <argsstring>()</argsstring>
        <name>waitUntilSettled</name>
        <briefdescription>
<para>Delays until the chassis has settled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="86" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1ac24f421fceda62040124c2fcfa61e394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HolonomicLib::AsyncHolonomicChassisController::setPose</definition>
        <argsstring>(const Pose2D &amp;ipose)</argsstring>
        <name>setPose</name>
        <param>
          <type>const <ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref> &amp;</type>
          <declname>ipose</declname>
        </param>
        <briefdescription>
<para>Sets current odom pose. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ipose</parametername>
</parameternamelist>
<parameterdescription>
<para>current pose </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="93" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a3d0965b11e7593e2bd83116fcf17815d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref></type>
        <definition>Pose2D HolonomicLib::AsyncHolonomicChassisController::getPose</definition>
        <argsstring>()</argsstring>
        <name>getPose</name>
        <briefdescription>
<para>Gets current odom pose. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>current pose </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="100" column="12" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0577b6fa6502e975d93b0ec96458351d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool HolonomicLib::AsyncHolonomicChassisController::isSettled</definition>
        <argsstring>()</argsstring>
        <name>isSettled</name>
        <briefdescription>
<para>Checks if the chassis is settled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if chassis is settled or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="107" column="10" bodyfile="src/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.cpp" bodystart="92" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>HolonomicLib::StateMachine&lt; ChassisState &gt;</label>
        <link refid="classHolonomicLib_1_1StateMachine"/>
      </node>
      <node id="1">
        <label>HolonomicLib::AsyncHolonomicChassisController</label>
        <link refid="classHolonomicLib_1_1AsyncHolonomicChassisController"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>HolonomicLib::TaskWrapper</label>
        <link refid="classHolonomicLib_1_1TaskWrapper"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>HolonomicLib::StateMachine&lt; ChassisState &gt;</label>
        <link refid="classHolonomicLib_1_1StateMachine"/>
      </node>
      <node id="5">
        <label>HolonomicLib::Pose2D</label>
        <link refid="structHolonomicLib_1_1Pose2D"/>
      </node>
      <node id="4">
        <label>HolonomicLib::TimedTrajectory</label>
        <link refid="classHolonomicLib_1_1TimedTrajectory"/>
      </node>
      <node id="6">
        <label>HolonomicLib::Trajectory</label>
        <link refid="classHolonomicLib_1_1Trajectory"/>
      </node>
      <node id="1">
        <label>HolonomicLib::AsyncHolonomicChassisController</label>
        <link refid="classHolonomicLib_1_1AsyncHolonomicChassisController"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>timedTrajectory</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>currentPose</edgelabel>
          <edgelabel>endPose</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>trajectory</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>HolonomicLib::TaskWrapper</label>
        <link refid="classHolonomicLib_1_1TaskWrapper"/>
      </node>
    </collaborationgraph>
    <location file="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" line="34" column="1" bodyfile="include/HolonomicLib/Chassis/Controller/AsyncHolonomicChassisController.hpp" bodystart="32" bodyend="149"/>
    <listofallmembers>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a204d6180f23ff817e415f57867c0cee5" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>AsyncHolonomicChassisController</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a39298643fed60a60698cf137a433a869" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>AsyncHolonomicChassisControllerBuilder</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a9e957edd5ba5a6b97db19e5a35da3be1" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>chassis</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a8ddc964faf9dd6942305e6fbb2a783c1" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>currentPose</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a11d2dd008802aecd56e3a0d4b34e8369" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>delayTime</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a442c2201aa779bd710e59abc830de379" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>distController</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1aacf390977de28b9a0fa2f59a977419eb" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>endPose</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1af58e45d5f1fca9352d755f5b4d5024e2" prot="public" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>getName</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a3d0965b11e7593e2bd83116fcf17815d" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>getPose</name></member>
      <member refid="classHolonomicLib_1_1StateMachine_1a7b4775f3279fd7004c2d6f6e46178639" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>getState</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1aa54abc5771999cf9d0308ee322a5ea6d" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>index</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0577b6fa6502e975d93b0ec96458351d" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>isSettled</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a72d773d7ee90e1204618ecaaccae9cc9" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>isTimedTrajectory</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a876a5a913b687017ca4f99d44d37d1fb" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>lock</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae24362f0e83484242658d5adc7c54304" prot="protected" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>loop</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0fdec61410af96d89275473fca65894c" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>model</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1ac0923845cff95c58e808e584dacff2ec" prot="public" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>pauseTask</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ad0ac308bb0e13b1c5073331d73837c0e" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>rate</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae1edcd9d7d6bd7ebaef38acc0096bbb7" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>resetControllers</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1ae7e853972219642cd24ab3e67fdb6066" prot="public" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>resumeTask</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ac19e10d15a6a3662094b5913c98fcd48" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>setControllerSampleTime</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ac24f421fceda62040124c2fcfa61e394" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>setPose</name></member>
      <member refid="classHolonomicLib_1_1StateMachine_1a9dbf72721774a28d20d5f38cc28f4016" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>setState</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1abe2b624eb3ec3efb0f5715d826ad93c1" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>setTarget</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a3609f4c1c91dfee3f12b41b620ff0a82" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>setTarget</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a388a64ffd23b7a3f3d8d38fb247ae6ab" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>setTarget</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a089e272b1a57bacb73fd8641d45e37ef" prot="public" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>startTask</name></member>
      <member refid="classHolonomicLib_1_1StateMachine_1a6f0aa72f5b506a45f1ca137ccb2a24e4" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>StateMachine</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a2cbd8303b80c220e95c1a7cb72fcf78d" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>stop</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a754156c423dcfb09dc4342e2833f3bef" prot="public" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>stopTask</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a7c86cdfa2cb0c99bf7169b820aa078eb" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>TaskWrapper</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a251cca2526a0f4c87e60fc4e48e4a2d6" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>TaskWrapper</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a09f915ceb1e5dacd86beef177b6b4e70" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>TaskWrapper</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a33367b32d444678c890b2c326f0c5a9a" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>timedTrajectory</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1ae926a61b5d1bb75d978914fe173f73ab" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>timer</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a3cc8ebdf34757bfbf44bb7f8799b466e" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>trajectory</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a35e7fb858907a0f69e5a8811180465cb" prot="protected" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>turnController</name></member>
      <member refid="classHolonomicLib_1_1AsyncHolonomicChassisController_1a0816021af47ab98099d2944712c8d35c" prot="public" virt="non-virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>waitUntilSettled</name></member>
      <member refid="classHolonomicLib_1_1TaskWrapper_1a5499e201e0a8d84717ff10ee78cbeaa4" prot="protected" virt="virtual"><scope>HolonomicLib::AsyncHolonomicChassisController</scope><name>~TaskWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
