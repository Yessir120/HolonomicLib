<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structHolonomicLib_1_1Pose2D" kind="struct" language="C++" prot="public">
    <compoundname>HolonomicLib::Pose2D</compoundname>
    <includes refid="Pose2D_8hpp" local="no">Pose2D.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structHolonomicLib_1_1Pose2D_1a3d6358038f364d1481fdfcae68ec3703" prot="public" static="no" mutable="no">
        <type>okapi::QLength</type>
        <definition>okapi::QLength HolonomicLib::Pose2D::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Pathing/Pose2D.hpp" line="14" column="20" bodyfile="include/HolonomicLib/Pathing/Pose2D.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structHolonomicLib_1_1Pose2D_1a86bc4b9cc0d8b1de84b39caf757a35cf" prot="public" static="no" mutable="no">
        <type>okapi::QLength</type>
        <definition>okapi::QLength HolonomicLib::Pose2D::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Pathing/Pose2D.hpp" line="14" column="22" bodyfile="include/HolonomicLib/Pathing/Pose2D.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structHolonomicLib_1_1Pose2D_1aed8ee64b862a6f9fe28b624347db772a" prot="public" static="no" mutable="no">
        <type>okapi::QAngle</type>
        <definition>okapi::QAngle HolonomicLib::Pose2D::theta</definition>
        <argsstring></argsstring>
        <name>theta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Pathing/Pose2D.hpp" line="15" column="19" bodyfile="include/HolonomicLib/Pathing/Pose2D.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structHolonomicLib_1_1Pose2D_1a1a1e4b3ce6e1f8f7c12608807b7e92bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HolonomicLib::Pose2D::Pose2D</definition>
        <argsstring>()=default</argsstring>
        <name>Pose2D</name>
        <briefdescription>
<para>Construct a new Pose 2D object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Pathing/Pose2D.hpp" line="21" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structHolonomicLib_1_1Pose2D_1a92c346fc3b144f908f1f1ea274f18799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HolonomicLib::Pose2D::Pose2D</definition>
        <argsstring>(okapi::QLength ix, okapi::QLength iy, okapi::QAngle itheta)</argsstring>
        <name>Pose2D</name>
        <param>
          <type>okapi::QLength</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>okapi::QLength</type>
          <declname>iy</declname>
        </param>
        <param>
          <type>okapi::QAngle</type>
          <declname>itheta</declname>
        </param>
        <briefdescription>
<para>Construct a new Pose 2D object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ix</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iy</parametername>
</parameternamelist>
<parameterdescription>
<para>y </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itheta</parametername>
</parameternamelist>
<parameterdescription>
<para>angle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Pathing/Pose2D.hpp" line="30" column="5" bodyfile="src/HolonomicLib/Pathing/Pose2D.cpp" bodystart="5" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="structHolonomicLib_1_1Pose2D_1a840a717045c6bf1d4b703c9359606fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HolonomicLib::Pose2D::Pose2D</definition>
        <argsstring>(const okapi::OdomState &amp;iState)</argsstring>
        <name>Pose2D</name>
        <param>
          <type>const okapi::OdomState &amp;</type>
          <declname>iState</declname>
        </param>
        <briefdescription>
<para>Converts an okapi OdomState into a <ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref> This is done by negating y coordinate and constraining theta to be between -180 and 180. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iState</parametername>
</parameternamelist>
<parameterdescription>
<para>the supplied OdomState </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Pathing/Pose2D.hpp" line="38" column="5" bodyfile="src/HolonomicLib/Pathing/Pose2D.cpp" bodystart="11" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="structHolonomicLib_1_1Pose2D_1afb6db88b63e6b29abcfbefc9f39db8ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HolonomicLib::Pose2D::Pose2D</definition>
        <argsstring>(const TrajectoryState &amp;iState)</argsstring>
        <name>Pose2D</name>
        <param>
          <type>const <ref refid="structHolonomicLib_1_1TrajectoryState" kindref="compound">TrajectoryState</ref> &amp;</type>
          <declname>iState</declname>
        </param>
        <briefdescription>
<para>Converts a <ref refid="structHolonomicLib_1_1TrajectoryState" kindref="compound">TrajectoryState</ref> into a <ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref> This is done by adding units (feet / degree) to the trajectory state&apos;s x, y and theta. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iState</parametername>
</parameternamelist>
<parameterdescription>
<para>the supplied TrajectoryStaet </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Pathing/Pose2D.hpp" line="46" column="5" bodyfile="src/HolonomicLib/Pathing/Pose2D.cpp" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="structHolonomicLib_1_1Pose2D_1ac334e2029753ac43ff165c3832fac854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HolonomicLib::Pose2D::Pose2D</definition>
        <argsstring>(const TimedTrajectoryState &amp;iState)</argsstring>
        <name>Pose2D</name>
        <param>
          <type>const <ref refid="structHolonomicLib_1_1TimedTrajectoryState" kindref="compound">TimedTrajectoryState</ref> &amp;</type>
          <declname>iState</declname>
        </param>
        <briefdescription>
<para>Converts a <ref refid="structHolonomicLib_1_1TimedTrajectoryState" kindref="compound">TimedTrajectoryState</ref> into a <ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref> This is done by adding units (feet / degree) to the trajectory state&apos;s x, y and theta. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iState</parametername>
</parameternamelist>
<parameterdescription>
<para>the suppliedTimeTrajectoryState </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Pathing/Pose2D.hpp" line="54" column="5" bodyfile="src/HolonomicLib/Pathing/Pose2D.cpp" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="structHolonomicLib_1_1Pose2D_1ac60e5df86ba3e7d8b64a393fca703dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>okapi::QLength</type>
        <definition>okapi::QLength HolonomicLib::Pose2D::distanceTo</definition>
        <argsstring>(const Pose2D &amp;other)</argsstring>
        <name>distanceTo</name>
        <param>
          <type>const <ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Computes the euclidean distance between two poses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the pose to calculate distance between </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>distance between the two pose </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Pathing/Pose2D.hpp" line="62" column="20" bodyfile="src/HolonomicLib/Pathing/Pose2D.cpp" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structHolonomicLib_1_1Pose2D_1a74c1e70295f615f9d07a062333a96bb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>okapi::QAngle</type>
        <definition>okapi::QAngle HolonomicLib::Pose2D::angleTo</definition>
        <argsstring>(const Pose2D &amp;other)</argsstring>
        <name>angleTo</name>
        <param>
          <type>const <ref refid="structHolonomicLib_1_1Pose2D" kindref="compound">Pose2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Computes the euclidean angle between two poses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the pose to calculate angle between </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>angle to the other pose </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/HolonomicLib/Pathing/Pose2D.hpp" line="70" column="19" bodyfile="src/HolonomicLib/Pathing/Pose2D.cpp" bodystart="33" bodyend="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Struct for position. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/HolonomicLib/Pathing/Pose2D.hpp" line="13" column="1" bodyfile="include/HolonomicLib/Pathing/Pose2D.hpp" bodystart="12" bodyend="71"/>
    <listofallmembers>
      <member refid="structHolonomicLib_1_1Pose2D_1a74c1e70295f615f9d07a062333a96bb0" prot="public" virt="non-virtual"><scope>HolonomicLib::Pose2D</scope><name>angleTo</name></member>
      <member refid="structHolonomicLib_1_1Pose2D_1ac60e5df86ba3e7d8b64a393fca703dbf" prot="public" virt="non-virtual"><scope>HolonomicLib::Pose2D</scope><name>distanceTo</name></member>
      <member refid="structHolonomicLib_1_1Pose2D_1a1a1e4b3ce6e1f8f7c12608807b7e92bd" prot="public" virt="non-virtual"><scope>HolonomicLib::Pose2D</scope><name>Pose2D</name></member>
      <member refid="structHolonomicLib_1_1Pose2D_1a92c346fc3b144f908f1f1ea274f18799" prot="public" virt="non-virtual"><scope>HolonomicLib::Pose2D</scope><name>Pose2D</name></member>
      <member refid="structHolonomicLib_1_1Pose2D_1a840a717045c6bf1d4b703c9359606fb5" prot="public" virt="non-virtual"><scope>HolonomicLib::Pose2D</scope><name>Pose2D</name></member>
      <member refid="structHolonomicLib_1_1Pose2D_1afb6db88b63e6b29abcfbefc9f39db8ad" prot="public" virt="non-virtual"><scope>HolonomicLib::Pose2D</scope><name>Pose2D</name></member>
      <member refid="structHolonomicLib_1_1Pose2D_1ac334e2029753ac43ff165c3832fac854" prot="public" virt="non-virtual"><scope>HolonomicLib::Pose2D</scope><name>Pose2D</name></member>
      <member refid="structHolonomicLib_1_1Pose2D_1aed8ee64b862a6f9fe28b624347db772a" prot="public" virt="non-virtual"><scope>HolonomicLib::Pose2D</scope><name>theta</name></member>
      <member refid="structHolonomicLib_1_1Pose2D_1a3d6358038f364d1481fdfcae68ec3703" prot="public" virt="non-virtual"><scope>HolonomicLib::Pose2D</scope><name>x</name></member>
      <member refid="structHolonomicLib_1_1Pose2D_1a86bc4b9cc0d8b1de84b39caf757a35cf" prot="public" virt="non-virtual"><scope>HolonomicLib::Pose2D</scope><name>y</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
