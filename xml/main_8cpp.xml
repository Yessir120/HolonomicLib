<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="main_8cpp" kind="file" language="C++">
    <compoundname>main.cpp</compoundname>
    <includes local="yes">main.h</includes>
    <incdepgraph>
      <node id="2">
        <label>main.h</label>
      </node>
      <node id="1">
        <label>src/main.cpp</label>
        <link refid="main_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main_8cpp_1a3a0f89da927d907fefeb553f0d8218e5" prot="public" static="no" mutable="no">
        <type>Motor</type>
        <definition>Motor leftFront</definition>
        <argsstring></argsstring>
        <name>leftFront</name>
        <initializer>= Motor(19, false, AbstractMotor::gearset::green, AbstractMotor::encoderUnits::degrees)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="17" column="7" bodyfile="src/main.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a8e4548cfc3be44256bfae777fc70c79d" prot="public" static="no" mutable="no">
        <type>Motor</type>
        <definition>Motor rightFront</definition>
        <argsstring></argsstring>
        <name>rightFront</name>
        <initializer>= Motor(11, true, AbstractMotor::gearset::green, AbstractMotor::encoderUnits::degrees)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="18" column="7" bodyfile="src/main.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a3f88bd50df9dd04b7994cd2afe3bc79f" prot="public" static="no" mutable="no">
        <type>Motor</type>
        <definition>Motor leftBack</definition>
        <argsstring></argsstring>
        <name>leftBack</name>
        <initializer>= Motor(10, false, AbstractMotor::gearset::green, AbstractMotor::encoderUnits::degrees)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="19" column="7" bodyfile="src/main.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a15916928512f68450630a1c58594460b" prot="public" static="no" mutable="no">
        <type>Motor</type>
        <definition>Motor rightBack</definition>
        <argsstring></argsstring>
        <name>rightBack</name>
        <initializer>= Motor(1, true, AbstractMotor::gearset::green, AbstractMotor::encoderUnits::degrees)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="20" column="7" bodyfile="src/main.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1aea046a8c0356a012ebd573d5dc1110bf" prot="public" static="no" mutable="no">
        <type>ADIEncoder</type>
        <definition>ADIEncoder leftEnc</definition>
        <argsstring></argsstring>
        <name>leftEnc</name>
        <initializer>= ADIEncoder(&apos;C&apos;, &apos;D&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="21" column="12" bodyfile="src/main.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a1d247ea5729762fbcfdf5920dd96409d" prot="public" static="no" mutable="no">
        <type>ADIEncoder</type>
        <definition>ADIEncoder rightEnc</definition>
        <argsstring></argsstring>
        <name>rightEnc</name>
        <initializer>= ADIEncoder(&apos;A&apos;, &apos;B&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="22" column="12" bodyfile="src/main.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a2ad763499a239efc00359e22b53870df" prot="public" static="no" mutable="no">
        <type>ADIEncoder</type>
        <definition>ADIEncoder midEnc</definition>
        <argsstring></argsstring>
        <name>midEnc</name>
        <initializer>= ADIEncoder(&apos;E&apos;, &apos;F&apos;, true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="23" column="12" bodyfile="src/main.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a047a89b0208974c18d5c49656240616a" prot="public" static="no" mutable="no">
        <type>IMU</type>
        <definition>IMU imu</definition>
        <argsstring></argsstring>
        <name>imu</name>
        <initializer>= IMU(12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="24" column="5" bodyfile="src/main.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a2aaa5a2ecb33ce62d94d3be910e5e156" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; OdomChassisController &gt;</type>
        <definition>std::shared_ptr&lt;OdomChassisController&gt; chassis</definition>
        <argsstring></argsstring>
        <name>chassis</name>
        <initializer>= ChassisControllerBuilder()
    .withMotors(<ref refid="main_8cpp_1a3a0f89da927d907fefeb553f0d8218e5" kindref="member">leftFront</ref>, <ref refid="main_8cpp_1a8e4548cfc3be44256bfae777fc70c79d" kindref="member">rightFront</ref>, <ref refid="main_8cpp_1a15916928512f68450630a1c58594460b" kindref="member">rightBack</ref>, <ref refid="main_8cpp_1a3f88bd50df9dd04b7994cd2afe3bc79f" kindref="member">leftBack</ref>)
    .withSensors(<ref refid="main_8cpp_1aea046a8c0356a012ebd573d5dc1110bf" kindref="member">leftEnc</ref>, <ref refid="main_8cpp_1a1d247ea5729762fbcfdf5920dd96409d" kindref="member">rightEnc</ref>, <ref refid="main_8cpp_1a2ad763499a239efc00359e22b53870df" kindref="member">midEnc</ref>)
    .withDimensions(AbstractMotor::gearset::green, {{3.25_in, 10.25_in}, imev5GreenTPR})
    .withOdometry({{2.75_in, 13.5_in, 7_in, 2.75_in}, quadEncoderTPR})
    .buildOdometry()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="26" column="17" bodyfile="src/main.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1a25a40b6614565f755233080a384c35f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="3" column="6" bodyfile="src/main.cpp" bodystart="3" bodyend="6"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a4e1a74721457de1f01d41566400fb3e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void disabled</definition>
        <argsstring>()</argsstring>
        <name>disabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="9" column="6" bodyfile="src/main.cpp" bodystart="9" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a870462d80a8efe920f8c95ee313cb9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void competition_initialize</definition>
        <argsstring>()</argsstring>
        <name>competition_initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="12" column="6" bodyfile="src/main.cpp" bodystart="12" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a3c7ca506bbc071fa740de13805b7f376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void autonomous</definition>
        <argsstring>()</argsstring>
        <name>autonomous</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="15" column="6" bodyfile="src/main.cpp" bodystart="15" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ac57194c628bb97b849be48d79c99c4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void opcontrol</definition>
        <argsstring>()</argsstring>
        <name>opcontrol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="35" column="6" bodyfile="src/main.cpp" bodystart="35" bodyend="52"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;main.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a25a40b6614565f755233080a384c35f1" kindref="member">initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a25a40b6614565f755233080a384c35f1" kindref="member">pros::lcd::initialize</ref>();</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>pros::lcd::set_text(1,<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>PROS<sp/>User!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a4e1a74721457de1f01d41566400fb3e5" kindref="member">disabled</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a870462d80a8efe920f8c95ee313cb9e5" kindref="member">competition_initialize</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a3c7ca506bbc071fa740de13805b7f376" kindref="member">autonomous</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">Motor<sp/><ref refid="main_8cpp_1a3a0f89da927d907fefeb553f0d8218e5" kindref="member">leftFront</ref><sp/>=<sp/>Motor(19,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>AbstractMotor::gearset::green,<sp/>AbstractMotor::encoderUnits::degrees);</highlight></codeline>
<codeline lineno="18"><highlight class="normal">Motor<sp/><ref refid="main_8cpp_1a8e4548cfc3be44256bfae777fc70c79d" kindref="member">rightFront</ref><sp/>=<sp/>Motor(11,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>AbstractMotor::gearset::green,<sp/>AbstractMotor::encoderUnits::degrees);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">Motor<sp/><ref refid="main_8cpp_1a3f88bd50df9dd04b7994cd2afe3bc79f" kindref="member">leftBack</ref><sp/>=<sp/>Motor(10,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>AbstractMotor::gearset::green,<sp/>AbstractMotor::encoderUnits::degrees);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">Motor<sp/><ref refid="main_8cpp_1a15916928512f68450630a1c58594460b" kindref="member">rightBack</ref><sp/>=<sp/>Motor(1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>AbstractMotor::gearset::green,<sp/>AbstractMotor::encoderUnits::degrees);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">ADIEncoder<sp/><ref refid="main_8cpp_1aea046a8c0356a012ebd573d5dc1110bf" kindref="member">leftEnc</ref><sp/>=<sp/>ADIEncoder(</highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">ADIEncoder<sp/><ref refid="main_8cpp_1a1d247ea5729762fbcfdf5920dd96409d" kindref="member">rightEnc</ref><sp/>=<sp/>ADIEncoder(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">ADIEncoder<sp/><ref refid="main_8cpp_1a2ad763499a239efc00359e22b53870df" kindref="member">midEnc</ref><sp/>=<sp/>ADIEncoder(</highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">IMU<sp/><ref refid="main_8cpp_1a047a89b0208974c18d5c49656240616a" kindref="member">imu</ref><sp/>=<sp/>IMU(12);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">std::shared_ptr&lt;OdomChassisController&gt;<sp/><ref refid="main_8cpp_1a2aaa5a2ecb33ce62d94d3be910e5e156" kindref="member">chassis</ref><sp/>=<sp/>ChassisControllerBuilder()</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>.withMotors(<ref refid="main_8cpp_1a3a0f89da927d907fefeb553f0d8218e5" kindref="member">leftFront</ref>,<sp/><ref refid="main_8cpp_1a8e4548cfc3be44256bfae777fc70c79d" kindref="member">rightFront</ref>,<sp/><ref refid="main_8cpp_1a15916928512f68450630a1c58594460b" kindref="member">rightBack</ref>,<sp/><ref refid="main_8cpp_1a3f88bd50df9dd04b7994cd2afe3bc79f" kindref="member">leftBack</ref>)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>.withSensors(<ref refid="main_8cpp_1aea046a8c0356a012ebd573d5dc1110bf" kindref="member">leftEnc</ref>,<sp/><ref refid="main_8cpp_1a1d247ea5729762fbcfdf5920dd96409d" kindref="member">rightEnc</ref>,<sp/><ref refid="main_8cpp_1a2ad763499a239efc00359e22b53870df" kindref="member">midEnc</ref>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>.withDimensions(AbstractMotor::gearset::green,<sp/>{{3.25_in,<sp/>10.25_in},<sp/>imev5GreenTPR})</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>.withOdometry({{2.75_in,<sp/>13.5_in,<sp/>7_in,<sp/>2.75_in},<sp/>quadEncoderTPR})</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>.buildOdometry();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ac57194c628bb97b849be48d79c99c4ac" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;AsyncHolonomicChassisController&gt;<sp/>hol<sp/>=<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>AsyncHolonomicChassisControllerBuilder()</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.withOutput(<ref refid="main_8cpp_1a2aaa5a2ecb33ce62d94d3be910e5e156" kindref="member">chassis</ref>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.withPIDGains(</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0.05,<sp/>0.0,<sp/>0.00065,<sp/>0.0},<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0.05,<sp/>0.0,<sp/>0.00065,<sp/>0.0}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.withTolerance({2_in,<sp/>2_in,<sp/>1_deg})</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.build();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>hol-&gt;setTarget({2_ft,<sp/>2_ft,<sp/>45_deg},<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;weeeee&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pros::delay(10);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/main.cpp"/>
  </compounddef>
</doxygen>
